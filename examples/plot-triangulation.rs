extern crate voronator;
extern crate plotters;
extern crate rand;

use voronator::delaunator::{triangulate_from_tuple};
use plotters::prelude::*;
use rand::prelude::*;
// use rand_distr::Uniform;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // let mut points = vec![Point{x: 0., y: 0.}];
    // for i in 0..200 {
    //     let angle = 2. * f64::consts::PI * (i as f64) / (20000 as f64);
    //     points.push(Point{x: 1e10 * angle.sin(), y: 1e10 * angle.cos()});
    // }
    let mut rng = rand::thread_rng();
    // let range = Uniform::new(0., 1000.);

    // let points: Vec<Point> = (0..1000).map(|_| Point {x: rng.sample(&range), y: rng.sample(&range)}).collect();

    let points: Vec<(f64, f64)> = vec!
    [(744.6966168494658,25.768924578786923),
    (127.93269617586624,246.65573532436298),
    (769.2598856479951,45.945038944294666),
    (769.474767500931,226.42728104212955),
    (711.763787306602,114.58670579709516),
    (844.1846562273631,309.0898717937822),
    (662.7088828922265,251.16008926965705),
    (942.4114516175005,272.78446953602133),
    (931.5667738123896,13.954895374994525),
    (345.6357964961328,74.75850491136207),
    (836.7903528406009,305.61214451121117),
    (814.7892120295195,201.12669959861336),
    (304.9982109679497,122.07472916743134),
    (461.8063421462622,43.93902590646013),
    (810.632943687991,264.5655835802354),
    (685.1865898690179,347.5162389775819),
    (864.3807856893815,186.59507325122115),
    (98.00989677902955,109.46508260060304),
    (524.8052036178403,37.152855513729044),
    (720.6020004063251,101.63762995663284),
    (674.5936429896399,209.83922269986968),
    (46.70874321298491,357.925864898787),
    (536.0168157162814,170.10140554037258),
    (639.0873278328082,63.28239109241789),
    (757.6328984923791,373.53959336903165),
    (384.83576932248104,360.01922784345936),
    (72.31242108783967,190.73951527512475),
    (896.0306774093772,142.63452583305636),
    (232.3803557357311,156.49604845569866),
    (532.2201723756117,111.8408527812795),
    (129.8544970950345,81.99698055317049),
    (17.831390846278197,391.6312594199021),
    (437.0440046025258,212.8734250314194),
    (405.5621984147934,329.8511130749483),
    (301.9754718514779,49.429636494350326),
    (277.56305923728723,50.28216643901003),
    (501.8420719983905,382.9704912180184),
    (712.982575408378,19.063819766131473),
    (415.02020213715895,132.98102459287983),
    (215.98354437377628,121.4930119478435),
    (924.0721330928054,238.15398882234976),
    (275.37988518194305,237.97761374901833),
    (603.0864080574875,291.23632963221286),
    (443.92724134488356,10.505761715746509),
    (935.3054280711116,271.7535648953627),
    (117.95428810107715,325.14802860122165),
    (277.6592469517403,87.14159388879787),
    (566.5625286945447,229.81716166649625),
    (80.80284903111774,152.2136643441364),
    (59.820497221767965,286.48046734875766),
    (575.8755260229564,356.23725898626947),
    (432.401394158947,221.26994676647752),
    (455.7024225629521,385.7702737655675),
    (57.801074996474426,170.82236201862574),
    (158.54888341929188,150.00153315809382),
    (951.6723308721012,136.29192318576432),
    (238.07723053066218,337.1966718760345),
    (587.3337311352917,314.59248103778094),
    (135.61906183824595,49.4719957624417),
    (184.4171953271426,139.58003368474098),
    (895.1127464147056,368.19950868594606),
    (289.87086669614814,85.33966847977696),
    (881.1456947767881,74.50327645647094),
    (722.5395610845617,128.9937849257601),
    (423.1421689476148,53.57568447155234),
    (250.8973004539284,307.78544625907847),
    (730.287811443733,153.28390083726075),
    (135.85230080088195,112.09931403745612),
    (457.6611442385518,344.3604413080015),
    (49.77443717434397,254.85536795605663),
    (868.9653726982633,58.26537048619356),
    (99.91949215674069,264.81578770648656),
    (150.81900890789535,193.28803922439093),
    (80.24028132821215,184.15699509026842),
    (56.598636960899,237.64285498536503),
    (63.44175692546074,167.19474270719684),
    (561.9676128872445,247.3460854204676),
    (93.45406449851552,163.4288277932126),
    (196.5842360816849,130.3091555033439),
    (568.9630439987754,25.74166444032384),
    (599.6755707983148,15.79954727533126),
    (948.8453762015733,312.6931784716534),
    (925.678912885907,189.32057766720095),
    (349.89175680848314,319.27094016205854),
    (888.0829801222775,390.98819992268227),
    (928.1711060184472,114.10533278223652),
    (412.18366537842746,154.1859280788338),
    (431.32455658628993,162.0515566539618),
    (838.3146050189754,335.3592124967109),
    (780.0864999700367,281.7314958041817),
    (267.33811989687587,337.6147827294428),
    (755.34397164144,53.91589179599254),
    (96.95559839233837,38.486725833327014),
    (448.18902566877523,198.814919608472),
    (530.0116565538531,30.895942762765483),
    (39.482297337531165,285.8026831725825),
    (643.6145124716854,318.1003305057069),
    (561.2960768929495,181.02274795722454),
    (804.1582703700415,275.8763352672501),
    (532.9704562735704,121.91655350132011)
    ];
    
    let (t, ps) = triangulate_from_tuple(&points).expect("No triangulation exists for this input.");

    let root = BitMapBackend::new("plot.png", (960, 400)).into_drawing_area();
    root.fill(&WHITE)?;

    let root = root.apply_coord_spec(RangedCoord::<RangedCoordf32, RangedCoordf32>::new(
        0f32..1000f32,
        0f32..1000f32,
        (0..1000, 0..1000),
    ));

    println!("triangles: {}", t.triangles.len() / 3);

    for i in 0..t.len() {
        let i0 = t.triangles[3*i];
        let i1 = t.triangles[3*i + 1];
        let i2 = t.triangles[3*i + 2];

        let p = vec![(ps[i0].x as f32, ps[i0].y as f32), 
                     (ps[i1].x as f32, ps[i1].y as f32), 
                     (ps[i2].x as f32, ps[i2].y as f32)];

        eprintln!("t[{}]: {:?}", i, p);
        
        let color = RGBColor{0: rng.gen(), 1: rng.gen(), 2: rng.gen()};
        eprintln!("color: {:?}", color);
        let poly = Polygon::new(p.clone(), Into::<ShapeStyle>::into(&color));
        root.draw(&poly)?;
    }

    for point in &ps {
        let p = (point.x as f32, point.y as f32);
        root.draw(&Circle::new(p, 3, ShapeStyle::from(&BLACK).filled()))?;
    }   
 
    Ok(())
}